require(ggplot2)
# вектор возраста
ages<-20:80
# повторяем вектор 10 раз
ages<-rep(ages,10)
# датайрейм со случайными v1 и v2, к v2 добавляем параболическю зависимость от ages
df<-data.frame(age=ages,v1=runif(length(ages)),v2=5000*runif(length(ages))+2*ages^2)
# посмотреть первые строки датафрейма
head(df)
# узнаём количество строк датафрейма
nrow(df)
# создаём столбец sex и заполняем его M
df$sex<-"M"
# рандомные идентификаторы для женщин - семплирование.
# первый параметр 1:length(ages) - индексы строк, второй - количество наборов, replace = F - выборка без повторений
id<-sample(1:length(ages),round(nrow(df)/2),replace = F)
# записыаем F в строки с номерами строк id
df$sex[id]<-"F"
# cтроим график с точками и сплайн-интерполяцией
ggplot(df,aes(x=ages,y=v2,color=sex)) + geom_point(alpha = 0.9) + geom_smooth(size = 1)
# при необходимости - установите пакет
install.packages("gglot2")
# при необходимости - установите пакет
install.packages("gglot2")
require(ggplot2)
require(ggplot2)
# вектор возраста
ages<-20:80
# повторяем вектор 10 раз
ages<-rep(ages,10)
# датайрейм со случайными v1 и v2, к v2 добавляем параболическю зависимость от ages
df<-data.frame(age=ages,v1=runif(length(ages)),v2=5000*runif(length(ages))+2*ages^2)
# посмотреть первые строки датафрейма
head(df)
# узнаём количество строк датафрейма
nrow(df)
# создаём столбец sex и заполняем его M
df$sex<-"M"
# рандомные идентификаторы для женщин - семплирование.
# первый параметр 1:length(ages) - индексы строк, второй - количество наборов, replace = F - выборка без повторений
id<-sample(1:length(ages),round(nrow(df)/2),replace = F)
# записыаем F в строки с номерами строк id
df$sex[id]<-"F"
# cтроим график с точками и сплайн-интерполяцией
ggplot(df,aes(x=ages,y=v2,color=sex)) + geom_point(alpha = 0.9) + geom_smooth(size = 1)
# добавляем к v2 только для строк с df$sex=="F" 5000 (для видности)
df[df$sex=="F",]$v2<-df[df$sex=="F",]$v2 + 5000
# при необходимости - установите пакет
#install.packages("gglot2")
# изучаем библиотеку ggplot2
require(ggplot2)
# вектор возраста
ages<-20:80
# повторяем вектор 10 раз
ages<-rep(ages,10)
# датайрейм со случайными v1 и v2, к v2 добавляем параболическю зависимость от ages
df<-data.frame(age=ages,v1=runif(length(ages)),v2=5000*runif(length(ages))+2*ages^2)
# посмотреть первые строки датафрейма
head(df)
# узнаём количество строк датафрейма
nrow(df)
# создаём столбец sex и заполняем его M
df$sex<-"M"
# рандомные идентификаторы для женщин - семплирование.
# первый параметр 1:length(ages) - индексы строк, второй - количество наборов, replace = F - выборка без повторений
id<-sample(1:length(ages),round(nrow(df)/2),replace = F)
# записыаем F в строки с номерами строк id
df$sex[id]<-"F"
# cтроим график с точками и сплайн-интерполяцией
ggplot(df,aes(x=ages,y=v2,color=sex)) + geom_point(alpha = 0.9) + geom_smooth(size = 1)
# cтроим график с точками и сплайн-интерполяцией
ggplot(df,aes(x=ages,y=v2,color=sex)) + geom_point(alpha = 0.9) + geom_smooth(size = 1)
# добавляем к v2 только для строк с df$sex=="F" 5000 (для видности)
df[df$sex=="F",]$v2<-df[df$sex=="F",]$v2 + 5000
head(df)
# ещё раз строим график, со сдвигом для женщин
ggplot(df,aes(x=ages,y=v2,color=sex)) + geom_point(alpha = 0.9) + geom_smooth(size = 1)
# столбцовая диаграмма
ggplot(df, aes(x=factor(age), y=v2,fill=sex))+  geom_boxplot() + labs(x="Age, years",y="Переменная V2")
require(ggplot2)
# вектор возраста
ages<-20:80
# повторяем вектор 10 раз
ages<-rep(ages,10)
# при необходимости - установите пакет
install.packages("gglot2")
require(ggplot2)
# при необходимости - установите пакет
install.packages("gglot2")
install.packages(pheatmap)
# load package
library(pheatmap)
# Create test matrix
#тестовая матрица, - 200 рандомных чисел (нормальное расределение), строки, столбцы
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
# paste - объединяет строку
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
# строим теплову карту
pheatmap(test,cluster_cols = F,scale = "column",display_numbers = T)
# генерируем dataframe
df1<-data.frame(seqn=1:10,v1=runif(10),v2=runif(10))
#названия строк - забираем из столбца seqn
row.names(df1)<-df1$seqn
# смотрим df1
df1
# генерируем dataframe - второй
df2<-data.frame(seqn=10:1,age=round(runif(10,20,80)),sex=round(runif(10,1,2)))
row.names(df2)<-df2$seqn
# смотрим df1
df2
# сливаем два датафрейма по инентификатору из seqn
df1_<-merge(df1, df2, by="seqn")
df1_<-df1_[,-1] # убираем первый столбец, т.е. seqn
#
cm<-cor(df1_) # кореляционная матрица
View(cm)
View(df)
View(df1_)
class(df1_)
class(df1_$v1)
class(df1_$v2)
class(df1_$age)
ggplot(df,aes(x=v1,y=v2,color=age)) + geom_point(alpha = 0.9) + geom_smooth(size = 1) +
scale_color_viridis(option = "D") + theme_minimal()+
theme(legend.position = "top")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Mm.eg.db)
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
BiocManager::install("ChIPpeakAnno")
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages("stringi")
###
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(ChIPseeker)
BiocManager::install("ChIPseeker")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker")
package.check <- function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
package.check("ChIPseeker")
package.check("TxDb.Hsapiens.UCSC.hg19.knownGene")
package.check("clusterProfiler")
package.check("GenomicFeatures")
package.check("org.Hs.eg.db")
package.check("ChIPpeakAnno")
package.check("ggplot2")
package.check("dplyr")
package.check("tidyr")
package.check("tibble")
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
ibrary(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Mm.eg.db)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
library(BiocManager)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tibble)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Mm.eg.db)
install.packages("go.db")
library(ChIPseeker)
###
#install.packages("ggplot2")
#install.packages(dplyr)
#install.packages(tidyr)
#install.packages(tibble)
#install.packages(ChIPseeker)
#install.packages(TxDb.Hsapiens.UCSC.hg19.knownGene)
#(clusterProfiler)
install.packages("jsonlite", type = "source")
library(ChIPseeker)
install.packages("go.db")
install.packages("jsonlite", type = "source")
install.packages("go.db")
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
peak <- readPeakFile(BED_FN)
pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
covplot(peak, weightCol="V5")
dev.off()
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
peak <- readPeakFile(BED_FN)
pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
covplot(peak, weightCol="V5")
dev.off()
# Installing BiocManager
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
library(stringi)
library(stringr)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
BiocManager::install("ChIPseeker", force=TRUE)
detach("package:stringi", unload = TRUE)
detach("package:stringr", unload = TRUE)
BiocManager::install("ChIPseeker", force=TRUE)
library(ChIPseeker)
install.packages("go.db")
install.packages("go.db")
BiocManager::install("ChIPseeker", force=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Mm.eg.db)
BiocManager::install("clusterProfiler", force=TRUE)
library(GO.db)
library(gtools)
library(rtracklayer)
library(stringi)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Mm.eg.db)
BiocManager::install("org.Hg.eg.db", force=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ChIPseeker", force=TRUE)
BiocManager::install("ChIPseeker", force=TRUE)
detach("package:stringi", unload = TRUE)
detach("package:rtracklayer", unload = TRUE)
detach("package:gtools", unload = TRUE)
BiocManager::install("ChIPseeker", force=TRUE)
library(ChIPseeker)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(clusterProfiler)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db", force=TRUE)
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(BED_FN, tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
peak <- readPeakFile(BED_FN)
pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
covplot(peak, weightCol="V5")
dev.off()
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(readPeakFile(BED_FN), tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
#pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.pdf'))
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
###
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(readPeakFile(BED_FN), tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
setwd('~/BioInf Project/hse21_H3K36me3_ZDNA_human/src')
###
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
#NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(readPeakFile(BED_FN), tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
DATA_DIR <- '../data/'
OUT_DIR <- '../img/'
#NAME <- 'H3K4me3_A549.intersect_with_DeepZ'
#NAME <- 'DeepZ'
NAME <- 'H3K36me3_A549.ENCFF127LEC.hg19.filtered'
#NAME <- 'H3K36me3_A549.ENCFF584FSY.hg19.filtered'
BED_FN <- paste0(DATA_DIR, NAME, '.bed')
###
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(readPeakFile(BED_FN), tssRegion=c(-3000, 3000), TxDb=txdb, annoDb="org.Hs.eg.db")
png(paste0(OUT_DIR, 'chip_seeker.', NAME, '.plotAnnoPie.png'))
plotAnnoPie(peakAnno)
dev.off()
# peak <- readPeakFile(BED_FN)
# pdf(paste0(OUT_DIR, 'chip_seeker.', NAME, '.covplot.pdf'))
# covplot(peak, weightCol="V5")
# dev.off()
#
